因为前几个版本涉及都了漏洞利用，因此软件原理就没有详解。如今，我认为的都被补上了。
我说我一下我以前的思路以及新软件的思路

首先给出关键性的api的url，大家可以根据这些api在分析的时候快速定位，详细内容大家可以抓包了解

1.登录认证：https://api.scctedu.com/api/authorizations
2.获取用户信息：https://api.scctedu.com/api/user/auth
3.获取课程列表：https://api.scctedu.com/api/student/course/list?page=1&limits=10
4.获取课程信息：https://api.scctedu.com/api/course/lesson/list?course_id=728&open_only=1
5.学习进度到67%：https://api.scctedu.com/api/student/course/lesson/study
6.加入答题：https://api.scctedu.com/api/student/paper/join
7.进入答题：https://api.scctedu.com/api/student/paper/enter?my_paper_id=123456
8.开始答题：https://api.scctedu.com/api/student/paper/start?id=456789
9.继续/重开一次练习（返回试题地址）：https://api.scctedu.com/api/student/exam/records?continue=1&id=456789
10.答题：https://api.scctedu.com/api/student/exam/answer
11.记录时间：https://api.scctedu.com/api/time?record_id=456789
12.提交试卷：https://api.scctedu.com/api/student/exam/hand?id=456789
13.查看试卷解析：https://api.scctedu.com/api/student/paper/analysis?id=456789
13.获取别人的评论：https://api.scctedu.com/api/student/course/lesson/discuss?lesson_id=85263
14.参与讨论：https://api.scctedu.com/api/student/course/lesson/discuss

数据包是我通过app抓的，因为app只涉及到api.scctedu.com，只需要认证一次，网页版的话貌似还需要www.scctedu.com，需要认证两次

2.7版本以下对应网站未更新之前
思路是加入答题-进入答题-开始答题-查看试卷解析-答题。该过程并没有获取试题，而是直接获取问题id，答案id并进行提交

随后网站进行了更新，查看解析的数据包中答案换了个键名==，一开始没发现这个问题，随后2.9才修复了该问题

2.9版本的思路与2.7之前相同，不同之处是答案解析的数据包有一丢丢变化

随后更新到3.0版本，由于3.0版本存在比较大的隐患，所以并未开放出来。
3.0版本的思路：加入答题-进入答题-开始答题-提交试卷-查看解析-开始答题-答题
这儿利用了试卷已阅的情况下仍然可以开始答题的BUG，将已阅卷的试卷重新开放，这个也是软件重置功能的思路。

网站接着不久修复了这个问题。这个时候我们再想起来爬题库，有点儿难受，因为返回的不再是文字，而是图片。
爬题库的接口为查看试卷解析，这儿并未做权限校验，因此我们可以遍历整个id段，服务器返回的数据中会标注哪个选项是正确的，哪个是错误的。
2.8版本之前，我以为问题id是固定的，答案id也是固定的，因此爬了一遍数据，只保存了问题id和对应的答案id，问题id设置unique，共爬到90000+题目数据，随后软件根据数据库进行答题，发现题目并未作答，分析发现==答案id居然不固定
重新构建数据库，这儿选项是图片，得考虑考虑选项的问题，一开始的想法是调用百度识图识别出一些样本数据，随后采用caffee学习训练，因为选项很规则，没有各种干扰，因此收敛还是很容易的。后来觉得有点儿麻烦，再次想到，虽然每次服务器都会生成选项的图片，但是生成图片的算法是一定的，因此我们可以采用特定算法，生成选项图片的特征值，然后数据库记录一下正确答案的图片的特征值，每次答题的时候，把选项的图片的特征值与数据库中的对比，相似度90%以上就可以认为图片一样了。后来再想想，还是很麻烦，又想到图片中并没有干扰，因此每次的图片数据肯定是一样的，不如直接采用MD5作为图片的特征值，随后也验证了这一点是正确的。然后按照这个思路构建了数据库。我构建的数据库的字段有id，question_name,quesiton_id,answer_1,is_correct_1,answer_2,is_correct_2,answer_3,is_correct_3,answer_4,is_correct_4,answer_5,is_correct_5
其中id为主键自增，question_name为问题，question_id为问题ID，设置unique，尽量不让题目重复，answer_1为选项A的图片地址，如果该选项为正确的，则is_correct_1为图片的MD5值，如果选项错误，is_correct_1为0，后续字段同理
爬了一晚上，我哭了，问题id居然都不固定，那我拿头去重啊！而且之前已经设置了question_id为unique，那说明数据不可靠，很有可能有数据由于question_id冲突而被舍弃。
没办法，删除question_id重新来过。

目前存在的问题是数据库无法去重，难以找到一个标准来去重，很头疼。
emmm非专业，可能数据库或者流程涉及的不是很合理，如果你有更好的想法，欢迎与我一起探讨啊